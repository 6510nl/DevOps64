//-----------------------------------------------------------
// Variables
//-----------------------------------------------------------

.var	music	=	LoadSid("SID/Happy_Birthday_Remix.sid")
.var	VICbank0 = $0000
.var	VICbank1 = $4000
.var	VICbank2 = $8000
.var	VICbank3 = $c000
			
//-----------------------------------------------------------
// Macros
//-----------------------------------------------------------

.macro SetBorderColor(color)
			{
			lda #color
			sta $d020

			}
		
.macro LoadSpriteFromPicture(filename) {
			.var	picture = LoadPicture(filename, List().add($ffffff, $0000000,$6c6c6c,$959595))
			.for	(var y=0; y<21; y++)
			.for	(var x=0; x<3; x++)
			.byte	picture.getSinglecolorByte(x,y) 
			.byte	0
}

//-----------------------------------------------------------
// Basic start line
//-----------------------------------------------------------

.pc			=	$0801	"Basic Start"
			:BasicUpstart($3000)

//-----------------------------------------------------------
// Start of main program
//-----------------------------------------------------------
.pc			=	$3000	"Main Program"

			//	SX64Detect
			
			lda #$10
			bit $01
			beq sx64pos
			lda #$00
			sta TestSX64
			jmp PassOn
sx64pos:
			lda #$01
			sta TestSX64

PassOn:	
			
			lda #$37
			sta $01

//-----------------------------------
//-----------------------------------
//----	REMOVE THE BELOW PART	-----
//-----------------------------------
//-----------------------------------

//			lda #$01
//			sta TestSX64

//-----------------------------------
//-----------------------------------
//----	REMOVE THIS	UPPER PART	-----
//-----------------------------------
//-----------------------------------
			

	
				
			lda #$01
			sta $d020
			sta $d021
				
			lda #music.startSong-1
			jsr music.init 

			lda #$00
			sta KIM0		//	reset the SX64Detect logo swing
			sta KIM10		//	reset scroll wait trigger
			lda #$01
			sta KIM1		//	reset Bank Switching
			sta	KIM4		//	reset Sprite Switching
			lda #$00
			sta KIM11		//	Reset Colorcycle
			
			jsr SwitchBank2	//	reset Switchbank pointers
			
			ldx #$00
!:			lda #$11		// background = 1 foreground = 5

			sta VICbank1+$0400,x
			sta VICbank1+$0500,x
			sta VICbank1+$0600,x
			sta VICbank1+$0700,x
			
			sta VICbank2+$0400,x
			sta VICbank2+$0500,x
			sta VICbank2+$0600,x
			sta VICbank2+$0700,x

			lda #$20
			sta VICbank0+$0400,x
			sta VICbank0+$0500,x
			sta VICbank0+$0600,x
			sta VICbank0+$0700,x
			
			lda #$00
			sta $d800,x
			sta $d900,x
			sta $da00,x
			sta $db00,x
											
			inx
			bne !-

			lda TestSX64
			cmp #$01
			bne	FakeSX

			lda #<SX64RealText
			sta SX64Text+1		
			lda #>SX64RealText
			sta SX64Text+2		
			jmp SkipFake
FakeSX:
			lda #<SX64FakeText
			sta SX64Text+1		
			lda #>SX64FakeText
			sta SX64Text+2		
SkipFake:
			ldx #$00
!:			lda #$00
			sta $d800,x
			sta $d800+40,x
SX64Text:	lda SX64FakeText,x
			sta $0400,x
			clc
			adc #$40
			sta $0400+40,x
			inx
			cpx #40
			bne !-
		
			sei						//	disable maskable IRQs

			lda #$7f                  	
			sta $dc0d				//	disable timer interrupts which can be generated by the two CIA chips
			sta $dd0d				//	the kernal uses such an interrupt to flash the cursor and scan the keyboard, so we better stop it.

			lda $dc0d				//	by reading this two registers we negate any pending CIA irqs.
			lda $dd0d				//	if we don't do this, a pending CIA irq might occur after we finish setting up our irq. we don't want that to happen.

			lda #$01				//	this is how to tell the VICII to generate a raster interrupt
			sta $d01a

			lda #$00				//	this is how to tell at which rasterline we want the irq to be triggered
			sta $d012                 	

			lda #%00111011			//	 #$1b - as there are more than 256 rasterlines, the topmost bit of $d011 serves as
			sta $d011  				//	the 8th bit for the rasterline we want our irq to be triggered.
			           				//	here we simply set up a character screen, leaving the topmost bit 0.
	
			lda #$35				//	we turn off the BASIC and KERNAL rom here
			sta $01					//	the cpu now sees RAM everywhere except at $d000-$e000, where still the registers of
			           				//	SID/VICII/etc are visible

			lda #<irq 				//	this is how we set up
			sta $fffe				//	the address of our interrupt code
			lda #>irq
			sta $ffff

			cli						//	enable maskable interrupts again
start:
			jmp start				//	we better don't RTS, the ROMS are now switched off, there's no way back to the system

irq:

									//	Being all kernal irq handlers switched off we have to do more work by ourselves.
									//	When an interrupt happens the CPU will stop what its doing, store the status and return address
									//	into the stack, and then jump to the interrupt routine. It will not store other registers, and if
									//	we destroy the value of A/X/Y in the interrupt routine, then when returning from the interrupt to
									//	what the CPU was doing will lead to unpredictable results (most probably a crash). So we better
									//	store those registers, and restore their original value before reentering the code the CPU was
									//	interrupted running.
									//	
									//	If you won't change the value of a register you are safe to not to store / restore its value.
									//	However, it's easy to screw up code like that with later modifying it to use another register too
									//	and forgetting about storing its state.
									//	
									//	The method shown here to store the registers is the most orthodox and most failsafe.

			pha        				//	store register A in stack
			txa        				//	
			pha        				//	store register X in stack
			tya        				//	
			pha        				//	store register Y in stack

			
//			:SetBorderColor(2)
			jsr	RoundAbout
//			:SetBorderColor(1)

			
			lda KIM7
			and #$07
			sta $d016
			lda #$1b	
			sta $d018
			
	//		lda $dd00			// SCROLLER
	//		and #%11111100		// SCROLLER
	//		ora #%00000011		// SCROLLER
	//		sta $dd00			// SCROLLER
	
						
!:			lda $d012
			cmp #$42
			bne	!-

			ldx #$03
!:			dex
			bne !-	
			nop		
									
//			:SetBorderColor(3)

			jsr DoVicBankSwitching
			lda #$3b
			sta $d011
			
//			:SetBorderColor(4)
 			jsr	ScrollRoutine
//			:SetBorderColor(1)	
			

			
!:			lda $d012
			cmp #$62
			bne	!-		

//			:SetBorderColor(5)
			jsr Sprite_SB_Init
//			:SetBorderColor(6)
							
//			:SetBorderColor(7)
			lda #$88
			sta KIM2	//	Sprite1to4X
			lda #$6f
			sta KIM3	//	Sprite1to4Y
			lda KIM15	//	Sprite Pointer
			jsr Sprite1to4
//			:SetBorderColor(1)
			
!:			lda $d012
			cmp #$7a
			bne	!-				
			
//			:SetBorderColor(8)
			lda #$88
			sta KIM5	//	Sprite5to8X
			lda #$6f+21
			sta KIM6	//	Sprite5to8Y
			lda KIM15	//	Sprite Pointer 			
			clc
			adc #$04
			jsr Sprite5to8
//			:SetBorderColor(1)

			
!:			lda $d012
			cmp #$92
			bne	!-		
						
//			:SetBorderColor(9)
			lda #$88
			sta KIM2	//	Sprite1to4X
			lda #$6f+21+21
			sta KIM3	//	Sprite1to4Y
			lda KIM15	//	Sprite Pointer 			
			clc
			adc #$08
			jsr Sprite1to4
//			:SetBorderColor(1)

!:			lda $d012
			cmp #$a2
			bne	!-				
			
//			:SetBorderColor(10)
			lda #$88
			sta KIM5	//	Sprite5to8X
			lda #$6f+21+21+21
			sta KIM6	//	Sprite5to8Y			
			lda KIM15	//	Sprite Pointer 			
			clc
			adc #$0c
			jsr Sprite5to8
//			:SetBorderColor(1)
		
!:			lda $d012
			cmp #$c2
			bne	!-	
			
//			:SetBorderColor(11)
			jsr SX64Detection
//			:SetBorderColor(1)	
			
			
!:			lda $d012
			cmp #$e2
			bne	!-			
//			:SetBorderColor(12)
			jsr EndHires
//			:SetBorderColor(1)			
						
		
			
// Opening the upper and lower border	
!:			lda $d012
			cmp #$fa
			bne	!-
//			:SetBorderColor(13)
			jsr OpenVerticalBorders
//			:SetBorderColor(1)
						


//			:SetBorderColor(14)
			jsr music.play
			:SetBorderColor(1)
		

			
			lda #$ff	//	;this is the orthodox and safe way of clearing the interrupt condition of the 
			sta $d019	//	;if you don't do this the interrupt condition will be present all the time an
						//	;up having the CPU running the interrupt code all the time, as when it exists 
						//	;interrupt, the interrupt request from the VICII will be there again regardles
						//	;rasterline counter.
						//
						//	;it's pretty safe to use inc $d019 (or any other rmw instruction) for brevity,
						//	;will only fail on hardware like c65 or supercpu. c64dtv is ok with this thoug

			pla
			tay			//	;restore register Y from stack (remember stack is FIFO: First In First Out)
			pla			//	
			tax			//	;restore register X from stack
			pla			//	;restore register A from stack
			rti			//	;Return From Interrupt, this will load into the Program Counter register the a
			   			//	;where the CPU was when the interrupt condition arised which will make the CPU
			   			//	;the code it was interrupted at also restores the status register of the CPU

//-----------------------------------------------------------

EndHires:
			ldx #$04
!:			dex
			bne !-
			nop
			nop
			nop
			lda #$c8
			sta $d016
			lda #$97
			sta $dd00
			lda #$1b
			sta $d011
			lda #$15
			sta $d018

			rts

SX64Detection:
			
			lda TestSX64
			cmp #$01
			beq SX64Real
			jmp SX64Fake
SX64Real:	

			lda #%11111111
			sta $d015
			lda #$00
			sta $d017	//	Sprite Y expanding 
			sta $d01d	//	Sprite X expanding
			lda #$06	//	BLUE
			sta $d027
			lda #$02	//	RED
			sta $d028
			lda #$00
			sta $d029
			sta $d02a
			sta $d02b
			sta $d02c
			sta $d02d
			sta $d02e
			
			
			ldx #$24
			.for (var i=0; i<7; i++) {
			stx VICbank0+$07f8+i
			inx
			}
		
			ldx KIM0
			lda DetectSX64Sinus,x
			sta $d000
			sta $d002
			clc
			adc #$18
			sta $d004
			clc
			adc #$18
			sta $d006
			clc
			adc #$18
			sta $d008
			clc
			adc #$18
			sta $d00a
			clc
			adc #$18
			sta $d00c
			clc
			adc #$18
			sta $d00e
			lda SX64D010,x
			sta $d010

			lda #$f0
			.for (var i=0; i<7; i++) {
				sta $d001+i+i
			}
 
			lda KIM0
			cmp #$7f
			beq DoneShove
			
			inc KIM9
			lda KIM9
			cmp #$02
			bne DoneShove
			inc KIM0
			lda #$00
			sta KIM9

			
DoneShove: 
			rts
			   			
			   	
SX64Fake:

			lda #%00011111
			sta $d015
			lda #$00
			sta $d017	//	Sprite Y expanding 
			sta $d01d	//	Sprite X expanding
	
			lda #$0c	//	Gray 2
			sta $d027
			lda #$0a	//	Red
			sta $d028
			lda #$0e	//	Light Blue
			sta $d029
			lda #$07	//	Yellow
			sta $d02a
			lda #$0d	//	Light Green
			sta $d02b
			
			ldx #$2b
			.for (var i=0; i<5; i++) {
			stx VICbank0+$07f8+i
			inx
			}
		
			ldx KIM0
			lda DetectSX64Sinus,x
			sta $d000
			clc
			adc #$20
			sta $d002
			clc
			adc #$0f
			sta $d004
			clc
			adc #$0d
			sta $d006
			clc
			adc #$0d
			sta $d008

			ldx KIM0
			lda SX64D010Fake,x
			sta $d010

			lda #$f2
			sta $d001
			lda #$f0
			sta $d005
			lda #$f5
			sta $d003
			sta $d007
			sta $d009
				
			lda KIM0
			cmp #$ff
			beq DoneShove2

			inc KIM9
			lda KIM9
			cmp #$02
			bne DoneShove2
			inc KIM0
			lda #$00
			sta KIM9
			
DoneShove2: 
			rts					

			

			
//-----------------------------------------------------------

OpenVerticalBorders:

			lda #$00
			sta $d011
			ldx #$48
!:			dex
			nop
			nop
			nop

			bne !-

			lda #$1b
			sta $d011
			rts
	
//-----------------------------------------------------------			
					
DoVicBankSwitching:
			//	The VIC banks
			//		$DD00 = %xxxxxx11 -> bank0: $0000-$3fff
			//		$DD00 = %xxxxxx10 -> bank1: $4000-$7fff
			//		$DD00 = %xxxxxx01 -> bank2: $8000-$cfff
			//		$DD00 = %xxxxxx00 -> bank3: $c000-$ffff
			//
			//		$D018 = %xxxx0xxx -> bitmap is at $0000
			//		$D018 = %xxxx1xxx -> bitmap is at $2000
			
			lda $d018
			ora	#%00001000
			sta $d018
			lda #$c8
			sta $d016
			lda KIM1			//	Back Switching Pointer
			sta $dd00
			rts		

SwitchBanks:
			lda KIM4			//	VIC Switching Pointer	#$01=SB	#$02=CM
			cmp #$02
			beq SwitchBank1
			cmp #$01
			beq SwitchBank2
			rts
			
			
SwitchBank1:
			lda $dd00			// SB logo
			and #%11111100		// SB logo	
			ora #%00000010		// SB logo
			sta KIM1			//	Back Switching Pointer
			lda #$01
			sta KIM4			//	VIC Switching Pointer
			rts
			
			
SwitchBank2:
			lda $dd00			// CM logo
			and #%11111100		// CM logo
			ora #%00000001		// CM logo
			sta KIM1			//	Back Switching Pointer
			lda #$02
			sta KIM4			//	VIC Switching Pointer
			rts
			
//-----------------------------------------------------------				
					
Sprite_SB_Init:
			lda #$ff
			sta $d015
			lda #$00
			sta $d010
			ldx KIM11			//	Roundabout table pointer
			lda SpriteColourTable,x
			.for (var i=0; i<8; i++) {
				sta $d027+i
			}
			lda KIM4
			cmp #$01
			beq SpriteVBank1
			cmp #$02
			beq	SpriteVBank2
			rts
SpriteVBank1:
			lda KIM11
			cmp #$00
			beq	SpriteVBank1a
			cmp #$80
			beq SpriteVBank1b
			rts
SpriteVBank2:
			lda KIM11
			cmp #$00
			beq	SpriteVBank2a
			cmp #$80
			beq SpriteVBank2b
			rts
SpriteVBank1a:
			lda #$40
			sta KIM15
			rts
SpriteVBank1b:
			lda #$50
			sta KIM15
			rts			
SpriteVBank2a:
			lda #$00
			sta KIM15
			rts
SpriteVBank2b:
			lda #$20
			sta KIM15
			rts
			
						
//-----------------------------------------------------------				
			
			
Sprite1to4:
			tax
			.for (var i=0; i<4; i++) {
			stx VICbank0+$07f8+i
			stx VICbank1+$07f8+i
			stx VICbank2+$07f8+i
			stx VICbank3+$07f8+i
			
				inx
			}
			
			lda KIM2 
			sta $d000
			clc
			adc #$18
			sta $d002
			clc
			adc #$18
			sta $d004
			clc
			adc #$18
			sta $d006
			lda KIM3
			sta $d001
			sta $d003
			sta $d005
			sta $d007			
			rts			
Sprite5to8:
			tax
			.for (var i=0; i<4; i++) {
				stx VICbank1+$07fc+i
				stx VICbank2+$07fc+i
				inx
			}

			lda KIM5
			sta $d008
			clc
			adc #$18
			sta $d00a
			clc
			adc #$18
			sta $d00c
			clc
			adc #$18
			sta $d00e
			lda KIM6
			sta $d009
			sta $d00b
			sta $d00d
			sta $d00f			
			rts				
			
//-----------------------------------------------------------

ScrollRoutine:
			lda KIM10
			cmp #$ff
			beq	GoScroll
			inc KIM10
			rts
GoScroll:			

			dec KIM7
			lda KIM8
			cmp #$00
			beq goslow
			dec KIM8
			rts
goslow:
			lda #$07
			sta KIM8
					
			ldx #$00
!:			lda VICbank0+$0401+00,x
			sta VICbank0+$0400+00,x
			lda VICbank0+$0401+40,x
			sta VICbank0+$0400+40,x
			inx
			cpx #39
			bne !-
			
			ldx #$00 
ScrollPnt:	lda MainScroll,x
			cmp #$ff
			beq	ResetScroll
			sta VICbank0+$0400+00+39
			clc
			adc #$40
			sta VICbank0+$0400+40+39
			
			lda ScrollPnt+1
			cmp #$ff
			bne OverFF
			inc ScrollPnt+2

OverFF:			
			inc ScrollPnt+1 	
			rts
ResetScroll:
			lda #<MainScroll
			sta ScrollPnt+1
			lda #>MainScroll
			sta ScrollPnt+2

			rts
			
//-----------------------------------------------------------
						
RoundAbout:
			inc KIM12		//	Roundabout Go Slow
			lda KIM12		//	Roundabout Go Slow
			cmp #$04
			beq RoundAboutGoSlow
			rts
RoundAboutGoSlow:
			lda #$00
			sta KIM12		//	Roundabout Go Slow
			inc KIM11		//	Roundabout cycle
			lda KIM11
			cmp #$00
			bne NoBankSwitchNow
			jsr SwitchBanks
NoBankSwitchNow:			
	//		lda KIM4		//	VIC Switching Pointer
	//		cmp #$01
	//		beq DoRAVB1
	//		cmp #$02
	//		beq DoRAVB2
	//		rts
DoRAVB1:	jsr RoundAboutVB2
	//		rts
DoRAVB2:	jsr	RoundAboutVB1
			rts		
RoundAboutVB1:
			
			ldx KIM11		//	Roundabout cycle
			
			lda RoundAboutTable,x
//			lda #$33
			sta VICbank1+$0400+08+40*12	// 271
			sta VICbank1+$0400+09+40*12
			sta VICbank1+$0400+10+40*12
			sta VICbank1+$0400+11+40*12
			sta VICbank1+$0400+12+40*12
			sta VICbank1+$0400+13+40*12
			dex
			lda RoundAboutTable,x
//			lda #$22
			sta VICbank1+$0400+08+40*11	// 275
			sta VICbank1+$0400+09+40*11
			sta VICbank1+$0400+10+40*11
			sta VICbank1+$0400+11+40*11
			sta VICbank1+$0400+12+40*11
			sta VICbank1+$0400+13+40*11
			dex	
						
			lda RoundAboutTable,x
//			lda #$11
			sta VICbank1+$0400+09+40*10	// 280
			sta VICbank1+$0400+10+40*10
			sta VICbank1+$0400+11+40*10
			dex			

			lda RoundAboutTable,x
//			lda #$ff
			sta VICbank1+$0400+09+40*09	// 285
			sta VICbank1+$0400+10+40*09
			sta VICbank1+$0400+11+40*09
			sta VICbank1+$0400+12+40*10
			sta VICbank1+$0400+13+40*10
			dex			
	
						
			lda RoundAboutTable,x
//			lda #$ee
			sta VICbank1+$0400+09+40*08	// 293
			sta VICbank1+$0400+10+40*08
			sta VICbank1+$0400+11+40*08
			sta VICbank1+$0400+12+40*09
			sta VICbank1+$0400+13+40*09
			sta VICbank1+$0400+14+40*10
			dex
			
			lda RoundAboutTable,x
//			lda #$dd
			sta VICbank1+$0400+10+40*07	// 300
			sta VICbank1+$0400+11+40*07
			sta VICbank1+$0400+12+40*08
			sta VICbank1+$0400+14+40*09
			dex
			
						
			lda RoundAboutTable,x
//			lda #$cc
			sta VICbank1+$0400+11+40*06	// 305
			sta VICbank1+$0400+12+40*07	
			sta VICbank1+$0400+13+40*08
			dex
			
			lda RoundAboutTable,x
//			lda #$bb
			sta VICbank1+$0400+11+40*05	// 310
			sta VICbank1+$0400+12+40*06
			sta VICbank1+$0400+13+40*07
			sta VICbank1+$0400+14+40*08
			sta VICbank1+$0400+15+40*09
			dex	
			
			
			lda RoundAboutTable,x
//			lda #$aa
			sta VICbank1+$0400+12+40*05	// 315
			sta VICbank1+$0400+13+40*06
			sta VICbank1+$0400+14+40*07
			sta VICbank1+$0400+15+40*08
			dex

			lda RoundAboutTable,x
//			lda #$99
			sta VICbank1+$0400+13+40*05	// 325
			sta VICbank1+$0400+14+40*06
			sta VICbank1+$0400+15+40*07
			sta VICbank1+$0400+16+40*08
			dex

			lda RoundAboutTable,x
//			lda #$88
			sta VICbank1+$0400+14+40*05	// 327
			sta VICbank1+$0400+15+40*06
			dex
									
			lda RoundAboutTable,x
//			lda #$77
			sta VICbank1+$0400+14+40*04	// 330
			sta VICbank1+$0400+15+40*05
			sta VICbank1+$0400+16+40*07
			dex
			
			lda RoundAboutTable,x
//			lda #$66
			sta VICbank1+$0400+15+40*03
			sta VICbank1+$0400+15+40*04	// 337
			sta VICbank1+$0400+16+40*05
			sta VICbank1+$0400+16+40*06
			sta VICbank1+$0400+17+40*07
			dex
			
			lda RoundAboutTable,x
//			lda #$44
			sta VICbank1+$0400+16+40*03	// 340
			sta VICbank1+$0400+16+40*04
			sta VICbank1+$0400+17+40*05
			sta VICbank1+$0400+17+40*06
			sta VICbank1+$0400+18+40*07
			dex

			lda RoundAboutTable,x
//			lda #$33		
			sta VICbank1+$0400+17+40*03	// 345
			sta VICbank1+$0400+17+40*04
			sta VICbank1+$0400+18+40*05
			sta VICbank1+$0400+18+40*06
			dex
			
			lda RoundAboutTable,x
//			lda #$22
			sta VICbank1+$0400+18+40*03	// 350
			sta VICbank1+$0400+18+40*04
			dex
			
			lda RoundAboutTable,x
//			lda #$ff
			sta VICbank1+$0400+19+40*03	// 359
			sta VICbank1+$0400+19+40*04
			sta VICbank1+$0400+19+40*05
			sta VICbank1+$0400+19+40*06
			sta VICbank1+$0400+19+40*07
			dex		
			
			lda RoundAboutTable,x
//			lda #$ff
			sta VICbank1+$0400+20+40*03	// 001
			sta VICbank1+$0400+20+40*04
			sta VICbank1+$0400+20+40*05
			sta VICbank1+$0400+20+40*06
			sta VICbank1+$0400+20+40*07
			dex
			
			lda RoundAboutTable,x
//			lda #$22
			sta VICbank1+$0400+21+40*03	// 005
			sta VICbank1+$0400+21+40*04
			dex
			
			lda RoundAboutTable,x
//			lda #$33
			sta VICbank1+$0400+22+40*03	// 010
			sta VICbank1+$0400+22+40*04
			sta VICbank1+$0400+21+40*05
			sta VICbank1+$0400+21+40*06
			dex
			
			lda RoundAboutTable,x
//			lda #$44
			sta VICbank1+$0400+23+40*03	// 015
			sta VICbank1+$0400+23+40*04
			sta VICbank1+$0400+22+40*05
			sta VICbank1+$0400+22+40*06
			sta VICbank1+$0400+21+40*07
			dex
			
			lda RoundAboutTable,x
//			lda #$66
			sta VICbank1+$0400+24+40*03
			sta VICbank1+$0400+24+40*04	// 022
			sta VICbank1+$0400+23+40*05
			sta VICbank1+$0400+23+40*06
			sta VICbank1+$0400+22+40*07
			dex
		
			lda RoundAboutTable,x
//			lda #$77
			sta VICbank1+$0400+25+40*04	// 030
			sta VICbank1+$0400+24+40*05
			sta VICbank1+$0400+23+40*07
			dex			
			
			lda RoundAboutTable,x
//			lda #$88
			sta VICbank1+$0400+25+40*05	// 035
			sta VICbank1+$0400+24+40*06
			
			lda RoundAboutTable,x
//			lda #$99
			sta VICbank1+$0400+26+40*05	// 040
			sta VICbank1+$0400+25+40*06
			sta VICbank1+$0400+24+40*07
			sta VICbank1+$0400+23+40*08
			dex		
			
			lda RoundAboutTable,x
//			lda #$aa
			sta VICbank1+$0400+27+40*05	// 045
			sta VICbank1+$0400+26+40*06
			sta VICbank1+$0400+25+40*07
			sta VICbank1+$0400+24+40*08
			dex

			lda RoundAboutTable,x
//			lda #$bb
			sta VICbank1+$0400+28+40*05	// 050
			sta VICbank1+$0400+27+40*06
			sta VICbank1+$0400+26+40*07
			sta VICbank1+$0400+25+40*08
			sta VICbank1+$0400+24+40*09
			dex

			lda RoundAboutTable,x
//			lda #$cc
			sta VICbank1+$0400+28+40*06	// 050
			sta VICbank1+$0400+27+40*07
			sta VICbank1+$0400+26+40*08
			dex

			lda RoundAboutTable,x
//			lda #$dd
			sta VICbank1+$0400+29+40*07	// 050
			sta VICbank1+$0400+28+40*07
			sta VICbank1+$0400+27+40*08
			sta VICbank1+$0400+25+40*09
			dex
			
			lda RoundAboutTable,x
//			lda #$ee
			sta VICbank1+$0400+30+40*08	// 067
			sta VICbank1+$0400+29+40*08
			sta VICbank1+$0400+28+40*08
			sta VICbank1+$0400+27+40*09
			sta VICbank1+$0400+26+40*09
			sta VICbank1+$0400+25+40*10
			dex

			lda RoundAboutTable,x
//			lda #$ff
			sta VICbank1+$0400+30+40*09	// 067
			sta VICbank1+$0400+29+40*09
			sta VICbank1+$0400+28+40*09
			sta VICbank1+$0400+27+40*10
			sta VICbank1+$0400+26+40*10
			dex		
			
			lda RoundAboutTable,x
//			lda #$11
			sta VICbank1+$0400+30+40*10	// 067
			sta VICbank1+$0400+29+40*10
			sta VICbank1+$0400+28+40*10
			dex							
						
			lda RoundAboutTable,x
//			lda #$22
			sta VICbank1+$0400+25+40*11	// 067
			sta VICbank1+$0400+26+40*11
			sta VICbank1+$0400+27+40*11
			sta VICbank1+$0400+28+40*11
			sta VICbank1+$0400+29+40*11
			sta VICbank1+$0400+30+40*11
			sta VICbank1+$0400+31+40*11
			dex	

			lda RoundAboutTable,x
//			lda #$22
			sta VICbank1+$0400+25+40*12	
			sta VICbank1+$0400+26+40*12
			sta VICbank1+$0400+27+40*12
			sta VICbank1+$0400+28+40*12
			sta VICbank1+$0400+29+40*12
			sta VICbank1+$0400+30+40*12
			sta VICbank1+$0400+31+40*12
			dex	
						
			lda RoundAboutTable,x
//			lda #$11
			sta VICbank1+$0400+28+40*13
			sta VICbank1+$0400+29+40*13
			sta VICbank1+$0400+30+40*13
			sta VICbank1+$0400+31+40*13
			dex	

			lda RoundAboutTable,x
//			lda #$ff
			sta VICbank1+$0400+26+40*13
			sta VICbank1+$0400+27+40*13
			sta VICbank1+$0400+28+40*14	// 095
			sta VICbank1+$0400+29+40*14
			sta VICbank1+$0400+30+40*14
			dex
			
			lda RoundAboutTable,x
//			lda #$ee
			sta VICbank1+$0400+25+40*13
			sta VICbank1+$0400+26+40*14
			sta VICbank1+$0400+27+40*14
			sta VICbank1+$0400+28+40*15	
			sta VICbank1+$0400+29+40*15
			sta VICbank1+$0400+30+40*15
			dex
			
			lda RoundAboutTable,x
//			lda #$dd
			sta VICbank1+$0400+25+40*14
			sta VICbank1+$0400+27+40*15
			sta VICbank1+$0400+28+40*16
			sta VICbank1+$0400+29+40*16
			sta VICbank1+$0400+30+40*16
			dex
			
			lda RoundAboutTable,x
//			lda #$cc
			sta VICbank1+$0400+26+40*15
			sta VICbank1+$0400+27+40*16
			sta VICbank1+$0400+28+40*17
			sta VICbank1+$0400+29+40*17
			dex

			lda RoundAboutTable,x
//			lda #$bb
			sta VICbank1+$0400+25+40*15
			sta VICbank1+$0400+26+40*16
			sta VICbank1+$0400+27+40*17
			sta VICbank1+$0400+28+40*18
			dex
						
			lda RoundAboutTable,x
//			lda #$aa
			sta VICbank1+$0400+24+40*15
			sta VICbank1+$0400+25+40*16
			sta VICbank1+$0400+26+40*17
			sta VICbank1+$0400+27+40*18
			dex
			
			lda RoundAboutTable,x
//			lda #$99
			sta VICbank1+$0400+24+40*16
			sta VICbank1+$0400+25+40*17
			sta VICbank1+$0400+26+40*18
			sta VICbank1+$0400+27+40*19
			dex
						
			lda RoundAboutTable,x
//			lda #$88
			sta VICbank1+$0400+25+40*18
			sta VICbank1+$0400+26+40*19
			dex			

			lda RoundAboutTable,x
//			lda #$77
			sta VICbank1+$0400+23+40*16
			sta VICbank1+$0400+24+40*17
			sta VICbank1+$0400+25+40*19
			dex	
			
			lda RoundAboutTable,x
//			lda #$66
			sta VICbank1+$0400+23+40*17
			sta VICbank1+$0400+24+40*18
			sta VICbank1+$0400+24+40*19
			sta VICbank1+$0400+25+40*20
			dex	
			
			lda RoundAboutTable,x
//			lda #$44
			sta VICbank1+$0400+22+40*17
			sta VICbank1+$0400+23+40*18
			sta VICbank1+$0400+23+40*19
			sta VICbank1+$0400+24+40*20
			sta VICbank1+$0400+24+40*21
			dex	
			
			lda RoundAboutTable,x
//			lda #$33
			sta VICbank1+$0400+21+40*17
			sta VICbank1+$0400+22+40*18
			sta VICbank1+$0400+22+40*19
			sta VICbank1+$0400+23+40*20
			sta VICbank1+$0400+23+40*21
			dex	
			
			lda RoundAboutTable,x
//			lda #$22
			sta VICbank1+$0400+21+40*18
			sta VICbank1+$0400+21+40*19
			sta VICbank1+$0400+22+40*20
			sta VICbank1+$0400+22+40*21
			dex	
			
			lda RoundAboutTable,x
//			lda #$ff
			sta VICbank1+$0400+20+40*17
			sta VICbank1+$0400+20+40*18
			sta VICbank1+$0400+20+40*19
			sta VICbank1+$0400+21+40*20
			sta VICbank1+$0400+21+40*21
			dex	
			
			lda RoundAboutTable,x
//			lda #$ee
			sta VICbank1+$0400+20+40*20
			sta VICbank1+$0400+20+40*21
			dex	

			lda RoundAboutTable,x
//			lda #$ee
			sta VICbank1+$0400+19+40*20
			sta VICbank1+$0400+19+40*21
			dex	
			
			lda RoundAboutTable,x
//			lda #$ff
			sta VICbank1+$0400+19+40*17
			sta VICbank1+$0400+19+40*18
			sta VICbank1+$0400+19+40*19
			sta VICbank1+$0400+18+40*20
			sta VICbank1+$0400+18+40*21
			dex	
		
			lda RoundAboutTable,x
//			lda #$22
			sta VICbank1+$0400+18+40*18
			sta VICbank1+$0400+18+40*19
			sta VICbank1+$0400+17+40*20
			sta VICbank1+$0400+17+40*21
			dex	
			
			lda RoundAboutTable,x
//			lda #$33
			sta VICbank1+$0400+18+40*17
			sta VICbank1+$0400+17+40*18
			sta VICbank1+$0400+17+40*19
			sta VICbank1+$0400+16+40*20
			sta VICbank1+$0400+16+40*21
			dex	
				
			lda RoundAboutTable,x
//			lda #$44
			sta VICbank1+$0400+17+40*17
			sta VICbank1+$0400+16+40*18
			sta VICbank1+$0400+16+40*19
			sta VICbank1+$0400+15+40*20
			sta VICbank1+$0400+15+40*21
			dex	
			
			lda RoundAboutTable,x
//			lda #$66
			sta VICbank1+$0400+16+40*17
			sta VICbank1+$0400+15+40*18
			sta VICbank1+$0400+15+40*19
			sta VICbank1+$0400+14+40*20
			dex	

			lda RoundAboutTable,x
//			lda #$77
			sta VICbank1+$0400+16+40*16
			sta VICbank1+$0400+15+40*17
			sta VICbank1+$0400+14+40*19
			dex	

			lda RoundAboutTable,x
//			lda #$88
			sta VICbank1+$0400+14+40*18
			sta VICbank1+$0400+13+40*19
			dex	
			
			lda RoundAboutTable,x
//			lda #$99
			sta VICbank1+$0400+15+40*16
			sta VICbank1+$0400+14+40*17
			sta VICbank1+$0400+13+40*18
			sta VICbank1+$0400+12+40*19
			dex
			
			lda RoundAboutTable,x
//			lda #$aa
			sta VICbank1+$0400+15+40*15
			sta VICbank1+$0400+14+40*16
			sta VICbank1+$0400+13+40*17
			sta VICbank1+$0400+12+40*18
			dex
			
			lda RoundAboutTable,x
//			lda #$bb
			sta VICbank1+$0400+14+40*15
			sta VICbank1+$0400+13+40*16
			sta VICbank1+$0400+12+40*17
			sta VICbank1+$0400+11+40*18
			dex
			
			lda RoundAboutTable,x
//			lda #$cc
			sta VICbank1+$0400+13+40*15
			sta VICbank1+$0400+12+40*16
			sta VICbank1+$0400+11+40*17
			sta VICbank1+$0400+10+40*17
			dex
			
			lda RoundAboutTable,x
//			lda #$dd
			sta VICbank1+$0400+14+40*14
			sta VICbank1+$0400+12+40*15
			sta VICbank1+$0400+11+40*16
			sta VICbank1+$0400+10+40*16
			sta VICbank1+$0400+09+40*16
			dex
			
			lda RoundAboutTable,x
//			lda #$ee
			sta VICbank1+$0400+14+40*13
			sta VICbank1+$0400+13+40*14
			sta VICbank1+$0400+12+40*14
			sta VICbank1+$0400+11+40*15	
			sta VICbank1+$0400+10+40*15
			sta VICbank1+$0400+09+40*15
			dex
			
			lda RoundAboutTable,x
//			lda #$ff
			sta VICbank1+$0400+13+40*13
			sta VICbank1+$0400+12+40*13
			sta VICbank1+$0400+11+40*14	// 095
			sta VICbank1+$0400+10+40*14
			sta VICbank1+$0400+09+40*14
			dex

			lda RoundAboutTable,x
//			lda #$11
			sta VICbank1+$0400+08+40*13
			sta VICbank1+$0400+09+40*13
			sta VICbank1+$0400+10+40*13
			sta VICbank1+$0400+11+40*13
			dex	
			
			rts
					
			
			
//-----------------------------------------------------------

RoundAboutVB2:
		
			ldx KIM11
			
			lda RoundAboutTable,x
//			lda #$33
			sta VICbank2+$0400+08+40*12	// 271
			sta VICbank2+$0400+09+40*12
			sta VICbank2+$0400+10+40*12
			sta VICbank2+$0400+11+40*12
			sta VICbank2+$0400+12+40*12
			sta VICbank2+$0400+13+40*12
			dex

			lda RoundAboutTable,x
//			lda #$22
			sta VICbank2+$0400+08+40*11	// 275
			sta VICbank2+$0400+09+40*11
			sta VICbank2+$0400+10+40*11
			sta VICbank2+$0400+11+40*11
			sta VICbank2+$0400+12+40*11
			sta VICbank2+$0400+13+40*11
			dex	
						
			lda RoundAboutTable,x
//			lda #$11
			sta VICbank2+$0400+09+40*10	// 280
			sta VICbank2+$0400+10+40*10
			sta VICbank2+$0400+11+40*10
			dex			

			lda RoundAboutTable,x
//			lda #$ff
			sta VICbank2+$0400+09+40*09	// 285
			sta VICbank2+$0400+10+40*09
			sta VICbank2+$0400+11+40*09
			sta VICbank2+$0400+12+40*10
			sta VICbank2+$0400+13+40*10
			dex			
	
						
			lda RoundAboutTable,x
//			lda #$ee
			sta VICbank2+$0400+09+40*08	// 293
			sta VICbank2+$0400+10+40*08
			sta VICbank2+$0400+11+40*08
			sta VICbank2+$0400+12+40*09
			sta VICbank2+$0400+13+40*09
			sta VICbank2+$0400+14+40*10
			dex
			
			lda RoundAboutTable,x
//			lda #$dd
			sta VICbank2+$0400+10+40*07	// 300
			sta VICbank2+$0400+11+40*07
			sta VICbank2+$0400+12+40*08
			sta VICbank2+$0400+14+40*09
			dex
			
						
			lda RoundAboutTable,x
//			lda #$cc
			sta VICbank2+$0400+11+40*06	// 305
			sta VICbank2+$0400+12+40*07	
			sta VICbank2+$0400+13+40*08
			dex
			
			lda RoundAboutTable,x
//			lda #$bb
			sta VICbank2+$0400+11+40*05	// 310
			sta VICbank2+$0400+12+40*06
			sta VICbank2+$0400+13+40*07
			sta VICbank2+$0400+14+40*08
			sta VICbank2+$0400+15+40*09
			dex	
			
			
			lda RoundAboutTable,x
//			lda #$aa
			sta VICbank2+$0400+12+40*05	// 315
			sta VICbank2+$0400+13+40*06
			sta VICbank2+$0400+14+40*07
			sta VICbank2+$0400+15+40*08
			dex

			lda RoundAboutTable,x
//			lda #$99
			sta VICbank2+$0400+13+40*05	// 325
			sta VICbank2+$0400+14+40*06
			sta VICbank2+$0400+15+40*07
			sta VICbank2+$0400+16+40*08
			dex

			lda RoundAboutTable,x
//			lda #$88
			sta VICbank2+$0400+14+40*05	// 327
			sta VICbank2+$0400+15+40*06
			dex
									
			lda RoundAboutTable,x
//			lda #$77
			sta VICbank2+$0400+14+40*04	// 330
			sta VICbank2+$0400+15+40*05
			sta VICbank2+$0400+16+40*07
			dex
			
			lda RoundAboutTable,x
//			lda #$66
			sta VICbank2+$0400+15+40*03
			sta VICbank2+$0400+15+40*04	// 337
			sta VICbank2+$0400+16+40*05
			sta VICbank2+$0400+16+40*06
			sta VICbank2+$0400+17+40*07
			dex
			
			lda RoundAboutTable,x
//			lda #$44
			sta VICbank2+$0400+16+40*03	// 340
			sta VICbank2+$0400+16+40*04
			sta VICbank2+$0400+17+40*05
			sta VICbank2+$0400+17+40*06
			sta VICbank2+$0400+18+40*07
			dex

			lda RoundAboutTable,x
//			lda #$33		
			sta VICbank2+$0400+17+40*03	// 345
			sta VICbank2+$0400+17+40*04
			sta VICbank2+$0400+18+40*05
			sta VICbank2+$0400+18+40*06
			dex
			
			lda RoundAboutTable,x
//			lda #$22
			sta VICbank2+$0400+18+40*03	// 350
			sta VICbank2+$0400+18+40*04
			dex
			
			lda RoundAboutTable,x
//			lda #$ff
			sta VICbank2+$0400+19+40*03	// 359
			sta VICbank2+$0400+19+40*04
			sta VICbank2+$0400+19+40*05
			sta VICbank2+$0400+19+40*06
			sta VICbank2+$0400+19+40*07
			dex		
			
			lda RoundAboutTable,x
//			lda #$ff
			sta VICbank2+$0400+20+40*03	// 001
			sta VICbank2+$0400+20+40*04
			sta VICbank2+$0400+20+40*05
			sta VICbank2+$0400+20+40*06
			sta VICbank2+$0400+20+40*07
			dex
			
			lda RoundAboutTable,x
//			lda #$22
			sta VICbank2+$0400+21+40*03	// 005
			sta VICbank2+$0400+21+40*04
			dex
			
			lda RoundAboutTable,x
//			lda #$33
			sta VICbank2+$0400+22+40*03	// 010
			sta VICbank2+$0400+22+40*04
			sta VICbank2+$0400+21+40*05
			sta VICbank2+$0400+21+40*06
			dex
			
			lda RoundAboutTable,x
//			lda #$44
			sta VICbank2+$0400+23+40*03	// 015
			sta VICbank2+$0400+23+40*04
			sta VICbank2+$0400+22+40*05
			sta VICbank2+$0400+22+40*06
			sta VICbank2+$0400+21+40*07
			dex
			
			lda RoundAboutTable,x
//			lda #$66
			sta VICbank2+$0400+24+40*03
			sta VICbank2+$0400+24+40*04	// 022
			sta VICbank2+$0400+23+40*05
			sta VICbank2+$0400+23+40*06
			sta VICbank2+$0400+22+40*07
			dex
		
			lda RoundAboutTable,x
//			lda #$77
			sta VICbank2+$0400+25+40*04	// 030
			sta VICbank2+$0400+24+40*05
			sta VICbank2+$0400+23+40*07
			dex			
			
			lda RoundAboutTable,x
//			lda #$88
			sta VICbank2+$0400+25+40*05	// 035
			sta VICbank2+$0400+24+40*06
			
			lda RoundAboutTable,x
//			lda #$99
			sta VICbank2+$0400+26+40*05	// 040
			sta VICbank2+$0400+25+40*06
			sta VICbank2+$0400+24+40*07
			sta VICbank2+$0400+23+40*08
			dex		
			
			lda RoundAboutTable,x
//			lda #$aa
			sta VICbank2+$0400+27+40*05	// 045
			sta VICbank2+$0400+26+40*06
			sta VICbank2+$0400+25+40*07
			sta VICbank2+$0400+24+40*08
			dex

			lda RoundAboutTable,x
//			lda #$bb
			sta VICbank2+$0400+28+40*05	// 050
			sta VICbank2+$0400+27+40*06
			sta VICbank2+$0400+26+40*07
			sta VICbank2+$0400+25+40*08
			sta VICbank2+$0400+24+40*09
			dex

			lda RoundAboutTable,x
//			lda #$cc
			sta VICbank2+$0400+28+40*06	// 050
			sta VICbank2+$0400+27+40*07
			sta VICbank2+$0400+26+40*08
			dex

			lda RoundAboutTable,x
//			lda #$dd
			sta VICbank2+$0400+29+40*07	// 050
			sta VICbank2+$0400+28+40*07
			sta VICbank2+$0400+27+40*08
			sta VICbank2+$0400+25+40*09
			dex
			
			lda RoundAboutTable,x
//			lda #$ee
			sta VICbank2+$0400+30+40*08	// 067
			sta VICbank2+$0400+29+40*08
			sta VICbank2+$0400+28+40*08
			sta VICbank2+$0400+27+40*09
			sta VICbank2+$0400+26+40*09
			sta VICbank2+$0400+25+40*10
			dex

			lda RoundAboutTable,x
//			lda #$ff
			sta VICbank2+$0400+30+40*09	// 067
			sta VICbank2+$0400+29+40*09
			sta VICbank2+$0400+28+40*09
			sta VICbank2+$0400+27+40*10
			sta VICbank2+$0400+26+40*10
			dex		
			
			lda RoundAboutTable,x
//			lda #$11
			sta VICbank2+$0400+30+40*10	// 067
			sta VICbank2+$0400+29+40*10
			sta VICbank2+$0400+28+40*10
			dex							
						
			lda RoundAboutTable,x
//			lda #$22
			sta VICbank2+$0400+25+40*11	// 067
			sta VICbank2+$0400+26+40*11
			sta VICbank2+$0400+27+40*11
			sta VICbank2+$0400+28+40*11
			sta VICbank2+$0400+29+40*11
			sta VICbank2+$0400+30+40*11
			sta VICbank2+$0400+31+40*11
			dex	

			lda RoundAboutTable,x
//			lda #$22
			sta VICbank2+$0400+25+40*12	
			sta VICbank2+$0400+26+40*12
			sta VICbank2+$0400+27+40*12
			sta VICbank2+$0400+28+40*12
			sta VICbank2+$0400+29+40*12
			sta VICbank2+$0400+30+40*12
			sta VICbank2+$0400+31+40*12
			dex	
						
			lda RoundAboutTable,x
//			lda #$11
			sta VICbank2+$0400+28+40*13
			sta VICbank2+$0400+29+40*13
			sta VICbank2+$0400+30+40*13
			sta VICbank2+$0400+31+40*13
			dex	

			lda RoundAboutTable,x
//			lda #$ff
			sta VICbank2+$0400+26+40*13
			sta VICbank2+$0400+27+40*13
			sta VICbank2+$0400+28+40*14	// 095
			sta VICbank2+$0400+29+40*14
			sta VICbank2+$0400+30+40*14
			dex
			
			lda RoundAboutTable,x
//			lda #$ee
			sta VICbank2+$0400+25+40*13
			sta VICbank2+$0400+26+40*14
			sta VICbank2+$0400+27+40*14
			sta VICbank2+$0400+28+40*15	
			sta VICbank2+$0400+29+40*15
			sta VICbank2+$0400+30+40*15
			dex
			
			lda RoundAboutTable,x
//			lda #$dd
			sta VICbank2+$0400+25+40*14
			sta VICbank2+$0400+27+40*15
			sta VICbank2+$0400+28+40*16
			sta VICbank2+$0400+29+40*16
			sta VICbank2+$0400+30+40*16
			dex
			
			lda RoundAboutTable,x
//			lda #$cc
			sta VICbank2+$0400+26+40*15
			sta VICbank2+$0400+27+40*16
			sta VICbank2+$0400+28+40*17
			sta VICbank2+$0400+29+40*17
			dex

			lda RoundAboutTable,x
//			lda #$bb
			sta VICbank2+$0400+25+40*15
			sta VICbank2+$0400+26+40*16
			sta VICbank2+$0400+27+40*17
			sta VICbank2+$0400+28+40*18
			dex
						
			lda RoundAboutTable,x
//			lda #$aa
			sta VICbank2+$0400+24+40*15
			sta VICbank2+$0400+25+40*16
			sta VICbank2+$0400+26+40*17
			sta VICbank2+$0400+27+40*18
			dex
			
			lda RoundAboutTable,x
//			lda #$99
			sta VICbank2+$0400+24+40*16
			sta VICbank2+$0400+25+40*17
			sta VICbank2+$0400+26+40*18
			sta VICbank2+$0400+27+40*19
			dex
						
			lda RoundAboutTable,x
//			lda #$88
			sta VICbank2+$0400+25+40*18
			sta VICbank2+$0400+26+40*19
			dex			

			lda RoundAboutTable,x
//			lda #$77
			sta VICbank2+$0400+23+40*16
			sta VICbank2+$0400+24+40*17
			sta VICbank2+$0400+25+40*19
			dex	
			
			lda RoundAboutTable,x
//			lda #$66
			sta VICbank2+$0400+23+40*17
			sta VICbank2+$0400+24+40*18
			sta VICbank2+$0400+24+40*19
			sta VICbank2+$0400+25+40*20
			dex	
			
			lda RoundAboutTable,x
//			lda #$44
			sta VICbank2+$0400+22+40*17
			sta VICbank2+$0400+23+40*18
			sta VICbank2+$0400+23+40*19
			sta VICbank2+$0400+24+40*20
			sta VICbank2+$0400+24+40*21
			dex	
			
			lda RoundAboutTable,x
//			lda #$33
			sta VICbank2+$0400+21+40*17
			sta VICbank2+$0400+22+40*18
			sta VICbank2+$0400+22+40*19
			sta VICbank2+$0400+23+40*20
			sta VICbank2+$0400+23+40*21
			dex	
			
			lda RoundAboutTable,x
//			lda #$22
			sta VICbank2+$0400+21+40*18
			sta VICbank2+$0400+21+40*19
			sta VICbank2+$0400+22+40*20
			sta VICbank2+$0400+22+40*21
			dex	
			
			lda RoundAboutTable,x
//			lda #$ff
			sta VICbank2+$0400+20+40*17
			sta VICbank2+$0400+20+40*18
			sta VICbank2+$0400+20+40*19
			sta VICbank2+$0400+21+40*20
			sta VICbank2+$0400+21+40*21
			dex	
			
			lda RoundAboutTable,x
//			lda #$ee
			sta VICbank2+$0400+20+40*20
			sta VICbank2+$0400+20+40*21
			dex	

			lda RoundAboutTable,x
//			lda #$ee
			sta VICbank2+$0400+19+40*20
			sta VICbank2+$0400+19+40*21
			dex	
			
			lda RoundAboutTable,x
//			lda #$ff
			sta VICbank2+$0400+19+40*17
			sta VICbank2+$0400+19+40*18
			sta VICbank2+$0400+19+40*19
			sta VICbank2+$0400+18+40*20
			sta VICbank2+$0400+18+40*21
			dex	
		
			lda RoundAboutTable,x
//			lda #$22
			sta VICbank2+$0400+18+40*18
			sta VICbank2+$0400+18+40*19
			sta VICbank2+$0400+17+40*20
			sta VICbank2+$0400+17+40*21
			dex	
			
			lda RoundAboutTable,x
//			lda #$33
			sta VICbank2+$0400+18+40*17
			sta VICbank2+$0400+17+40*18
			sta VICbank2+$0400+17+40*19
			sta VICbank2+$0400+16+40*20
			sta VICbank2+$0400+16+40*21
			dex	
				
			lda RoundAboutTable,x
//			lda #$44
			sta VICbank2+$0400+17+40*17
			sta VICbank2+$0400+16+40*18
			sta VICbank2+$0400+16+40*19
			sta VICbank2+$0400+15+40*20
			sta VICbank2+$0400+15+40*21
			dex	
			
			lda RoundAboutTable,x
//			lda #$66
			sta VICbank2+$0400+16+40*17
			sta VICbank2+$0400+15+40*18
			sta VICbank2+$0400+15+40*19
			sta VICbank2+$0400+14+40*20
			dex	

			lda RoundAboutTable,x
//			lda #$77
			sta VICbank2+$0400+16+40*16
			sta VICbank2+$0400+15+40*17
			sta VICbank2+$0400+14+40*19
			dex	

			lda RoundAboutTable,x
//			lda #$88
			sta VICbank2+$0400+14+40*18
			sta VICbank2+$0400+13+40*19
			dex	
			
			lda RoundAboutTable,x
//			lda #$99
			sta VICbank2+$0400+15+40*16
			sta VICbank2+$0400+14+40*17
			sta VICbank2+$0400+13+40*18
			sta VICbank2+$0400+12+40*19
			dex
			
			lda RoundAboutTable,x
//			lda #$aa
			sta VICbank2+$0400+15+40*15
			sta VICbank2+$0400+14+40*16
			sta VICbank2+$0400+13+40*17
			sta VICbank2+$0400+12+40*18
			dex
			
			lda RoundAboutTable,x
//			lda #$bb
			sta VICbank2+$0400+14+40*15
			sta VICbank2+$0400+13+40*16
			sta VICbank2+$0400+12+40*17
			sta VICbank2+$0400+11+40*18
			dex
			
			lda RoundAboutTable,x
//			lda #$cc
			sta VICbank2+$0400+13+40*15
			sta VICbank2+$0400+12+40*16
			sta VICbank2+$0400+11+40*17
			sta VICbank2+$0400+10+40*17
			dex
			
			lda RoundAboutTable,x
//			lda #$dd
			sta VICbank2+$0400+14+40*14
			sta VICbank2+$0400+12+40*15
			sta VICbank2+$0400+11+40*16
			sta VICbank2+$0400+10+40*16
			sta VICbank2+$0400+09+40*16
			dex
			
			lda RoundAboutTable,x
//			lda #$ee
			sta VICbank2+$0400+14+40*13
			sta VICbank2+$0400+13+40*14
			sta VICbank2+$0400+12+40*14
			sta VICbank2+$0400+11+40*15	
			sta VICbank2+$0400+10+40*15
			sta VICbank2+$0400+09+40*15
			dex
			
			lda RoundAboutTable,x
//			lda #$ff
			sta VICbank2+$0400+13+40*13
			sta VICbank2+$0400+12+40*13
			sta VICbank2+$0400+11+40*14	// 095
			sta VICbank2+$0400+10+40*14
			sta VICbank2+$0400+09+40*14
			dex

			lda RoundAboutTable,x
//			lda #$11
			sta VICbank2+$0400+08+40*13
			sta VICbank2+$0400+09+40*13
			sta VICbank2+$0400+10+40*13
			sta VICbank2+$0400+11+40*13
			dex	
			
			rts
					
			
			
//-----------------------------------------------------------


.pc			=	$0840	"Keep In Mind table"
//	KeepInMindTable
KIM0:		.byte	$00	//	SX64Detection logo swing
KIM1:		.byte	$02	//	Bank Switching Pointer
KIM2:		.byte	$88	//	Sprite1to4X	#$88
KIM3:		.byte	$70	//	Sprite1to4Y	#$70
KIM4:		.byte	$02	//	VIC Switching Pointer	#$01=SB	#$02=CM
KIM5:		.byte	$88	//	Sprite5to8X	#$88
KIM6:		.byte	$70	//	Sprite5to8Y	#$70
KIM7:		.byte	$07	//	Top scroller $d016 pointer
KIM8:		.byte	$07	//	Top scroller slow down
KIM9:		.byte	$00	//	SXDetection logo slow down
KIM10:		.byte	$00	//	Detect text wait loop
KIM11:		.byte	$00	//	Roundabout table pointer
KIM12:		.byte	$00	//	Roundabout go slow
KIM13:		.byte	$00	//	Switcher border
KIM14:		.byte	$00	//	Switcher center
KIM15:		.byte	$20	//	Sprite Row 1 Pointer	VB1SB:$40/$50		VB2CM:$00-$20
KIM16:		.byte	$00	//	Bank Switch Timer
KIM17:		.byte	$00	//	Bank Switch Timer Go Slow
TestSX64:	.byte	$00	//	$00= false $01=true	
//-----------------------------------------------------------
			

.pc			=	$0D00	"DetectSX64 Sinus"

DetectSX64Sinus:

		//	.fill 256, 127.5 + 127.5*sin(toRadians(i*360/256)) // Generates a sine curve
			.fill 256, 24 + 80 * cos(toRadians(i*360/256)) // Generates a sine curve

//-----------------------------------------------------------
			
			
.pc			=	$0E00	"SX64 $D010 table Real"
SX64D010:	// lengte = $7f
			
			.byte %11111111
			.byte %11111111
			.byte %11111111
			.byte %11111111
			.byte %11111111
			.byte %11111111
			.byte %11111111
			.byte %11111111
			.byte %11111111
			.byte %11111111
			.byte %11111111
			.byte %11111111
			.byte %11111111
			.byte %11111111
			.byte %11111111
			.byte %11111111
			.byte %11111111
			.byte %11111111
			.byte %11111111
			.byte %11111111
			.byte %11111111
			.byte %11111111
			.byte %11111111
			.byte %11111111
			.byte %11111111
			.byte %11111111
			.byte %11111111
			.byte %11111111
			.byte %11111111
			.byte %11111111
			.byte %11111111
			.byte %11111111
			.byte %11111111
			.byte %11111111
			.byte %11111111
			.byte %11111111
			.byte %11111111
			.byte %11111111
			.byte %11111111
			.byte %11111111
			.byte %11111111
			.byte %11111111
			.byte %11111111
			.byte %11111111
			.byte %11111111
			.byte %11111111
			.byte %11111111
			.byte %11111111
			.byte %11111111
			.byte %11111111
			.byte %11111111
			.byte %11111111
			.byte %11111111
			.byte %11111111
			.byte %11111111
			.byte %11111111
			.byte %11111111
			.byte %11111111
			.byte %11111111
			.byte %11111111
			.byte %11111111
			.byte %11111111
			.byte %11111111
			.byte %11111111
			.byte %11111111
			.byte %11111111
			.byte %11111111
			.byte %11111111
			.byte %11111111
			.byte %11111111
			.byte %11111111
			.byte %11111111
			.byte %11111111
			.byte %11111111
			.byte %11111111
			.byte %11111111
			.byte %11111111
			.byte %11111100
			.byte %11111100
			.byte %11111100
			.byte %11111100
			.byte %11111100
			.byte %11111100
			.byte %11111100
			.byte %11111100
			.byte %11111100
			.byte %11111100
			.byte %11111100
			.byte %11111100
			.byte %11111100
			.byte %11111100
			.byte %11111000
			.byte %11111000
			.byte %11111000
			.byte %11111000
			.byte %11111000
			.byte %11111000
			.byte %11111000
			.byte %11111000
			.byte %11111000
			.byte %11111000
			.byte %11111000
			.byte %11111000
			.byte %11111000
			.byte %11111000
			.byte %11111000
			.byte %11111000
			.byte %11111000
			.byte %11111000
			.byte %11111000
			.byte %11111000
			.byte %11110000
			.byte %11110000
			.byte %11110000
			.byte %11110000
			.byte %11110000
			.byte %11110000
			.byte %11110000
			.byte %11110000
			.byte %11110000
			.byte %11110000
			.byte %11110000
			.byte %11110000
			.byte %11110000
			.byte %11110000
			.byte %11110000
			.byte %11110000
			.byte %11110000

.pc			=	$1000	"SX64 $D010 table FAKE"
		
SX64D010Fake:	// lengte = $7f
			
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011110
			.byte %00011110
			.byte %00011110
			.byte %00011110
			.byte %00011110
			.byte %00011110
			.byte %00011110
			.byte %00011110
			.byte %00011110
			.byte %00011110
			.byte %00011110
			.byte %00011110
			.byte %00011110
			.byte %00011110
			.byte %00011110
			.byte %00011110
			.byte %00011110
			.byte %00011110
			.byte %00011110
			.byte %00011110
			.byte %00011100
			.byte %00011100
			.byte %00011100
			.byte %00011100
			.byte %00011100
			.byte %00011100
			.byte %00011100
			.byte %00011100
			.byte %00011100
			.byte %00011100
			.byte %00011100
			.byte %00011100
			.byte %00011100
			.byte %00011000
			.byte %00011000
			.byte %00011000
			.byte %00011000
			.byte %00011000
			.byte %00011000
			.byte %00011000
			.byte %00011000
			.byte %00011000
			.byte %00011000
			.byte %00011000
			.byte %00011000
			.byte %00011000
			.byte %00011000
			.byte %00011000
			.byte %00011000
			.byte %00011000
			.byte %00011000
			
			
			.byte %00011000
			.byte %00011000
			.byte %00011000
			.byte %00011000
			.byte %00011000
			.byte %00011000
			.byte %00011000
			.byte %00011000
			.byte %00011000
			.byte %00011000
			.byte %00011000
			.byte %00011000
			.byte %00011000
			.byte %00011000
			.byte %00011000
			.byte %00011000
			.byte %00011000
			.byte %00011000
			.byte %00011000
			.byte %00011100
			.byte %00011100
			.byte %00011100
			.byte %00011100
			.byte %00011100
			.byte %00011100
			.byte %00011100
			.byte %00011100
			.byte %00011100
			.byte %00011100
			.byte %00011100
			.byte %00011100
			.byte %00011100
			.byte %00011110
			.byte %00011110
			.byte %00011110
			.byte %00011110
			.byte %00011110
			.byte %00011110
			.byte %00011110
			.byte %00011110
			.byte %00011110
			.byte %00011110
			.byte %00011110
			.byte %00011110
			.byte %00011110
			.byte %00011110
			.byte %00011110
			.byte %00011110
			.byte %00011110
			.byte %00011110
			.byte %00011110
			.byte %00011110
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
			.byte %00011111
	

			
//-----------------------------------------------------------
.pc			=	music.location	"SID"
			.fill	music.size, music.getData(i)
			.print	""
			.print	"SID Data"
			.print	"--------"
			.print	"location=$"+toHexString(music.location)
			.print	"init=$"+toHexString(music.init)
			.print	"play=$"+toHexString(music.play)

//-----------------------------------------------------------

.pc			=	$c000	"Scroll text"
MainScroll:

			.import text "TXT/MainScroll.txt"

			.byte $ff ,$ff ,$ff, $ff, $ff ,$ff ,$ff, $ff
			
			.text		"                                                "
			.text		"     ---- hare krsna hare krsna ----     "
			.text		"     ---- krsna krsna hare hare ----     "
			.text		"     ---- hare rama hare rama ----     "
			.text		"     ---- rama rama hare hare ----     "
			.text		"                                                "
			
//-----------------------------------------------------------

.pc			=	$2800	"Font 8x16 $d018=$1b"
Font8x16:
			.import c64 "GFX/8x16Font.prg"
			.byte $ff
						
			
			
//-----------------------------------------------------------

.pc			=	VICbank1 + $2000	"Hires Border StarBucks"
			.import c64 "GFX/SB_border.PRG"
			
//-----------------------------------------------------------			
			
.pc			=	VICbank2 + $2000	"Hires Border Commodore" 		
			.import c64 "GFX/CM_border.PRG"

//-----------------------------------------------------------
			
			
.pc			=	$0900				"Sprites: SX64 Detected"
			
			:LoadSpriteFromPicture("GFX/C1.gif")
			:LoadSpriteFromPicture("GFX/C2.gif")
			:LoadSpriteFromPicture("GFX/SX-64_1.gif")
			:LoadSpriteFromPicture("GFX/SX-64_2.gif")
			:LoadSpriteFromPicture("GFX/SX-64_3.gif")
			:LoadSpriteFromPicture("GFX/SX-64_4.gif")
			:LoadSpriteFromPicture("GFX/SX-64_5.gif")
			:LoadSpriteFromPicture("GFX/ebay_cart.gif")
			:LoadSpriteFromPicture("GFX/ebay_e.gif")
			:LoadSpriteFromPicture("GFX/ebay_b.gif")
			:LoadSpriteFromPicture("GFX/ebay_a.gif")
			:LoadSpriteFromPicture("GFX/ebay_y.gif")

.pc			=	$0c00				"Roundabout color table"
RoundAboutTable:

			

			.byte $11,$11,$11,$11,$11,$11,$1d,$1f	// Fade
			.byte $15,$15,$15,$15,$15,$15,$15,$15			
			.byte $15,$15,$15,$15,$15,$15,$15,$15
			.byte $15,$15,$15,$15,$15,$15,$15,$15
			
			.byte $15,$15,$15,$15,$15,$15,$15,$15
			.byte $15,$15,$15,$15,$15,$15,$15,$15			
			.byte $15,$15,$15,$15,$15,$15,$15,$15
			.byte $15,$15,$15,$15,$15,$15,$15,$15

			.byte $15,$15,$15,$15,$15,$15,$15,$15
			.byte $15,$15,$15,$15,$15,$15,$15,$15
			.byte $15,$15,$15,$15,$15,$15,$15,$15
			.byte $15,$15,$15,$15,$15,$15,$15,$15		

			.byte $15,$15,$15,$15,$15,$15,$15,$15	//	Twinkle
			.byte $15,$15,$15,$15,$15,$1f,$1d,$11
			.byte $11,$1d,$1f,$15,$15,$15,$15,$15
			.byte $15,$15,$15,$15,$15,$15,$15,$15	//	Twinkle

			.byte $15,$15,$15,$15,$15,$15,$15,$15
			.byte $15,$15,$15,$15,$15,$15,$15,$15
			.byte $15,$15,$15,$15,$15,$15,$15,$15
			.byte $15,$15,$15,$15,$15,$15,$15,$15			

			.byte $15,$15,$15,$15,$15,$15,$15,$15
			.byte $15,$15,$15,$15,$15,$15,$15,$15
			.byte $15,$15,$15,$15,$15,$15,$15,$15			
			.byte $1f,$1d,$11,$11,$11,$11,$11,$11	//Fade
	
			.byte $11,$11,$11,$11,$11,$11,$11,$11
			.byte $11,$11,$11,$11,$11,$11,$11,$11
			.byte $11,$11,$11,$11,$11,$11,$11,$11
			.byte $11,$11,$11,$11,$11,$11,$11,$11

			.byte $11,$11,$11,$11,$11,$11,$11,$11
			.byte $11,$11,$11,$11,$11,$11,$11,$11			
			.byte $11,$11,$11,$11,$11,$11,$11,$11			
			.byte $11,$11,$11,$11,$11,$11,$11,$11

.pc			=	$0f00				"Sprite color table"
SpriteColourTable:

			.text "aaaaolk@"
			.text "@@@@@@@@"
			.text "@@@@@@@@"
			.text "@@@@@@@@"
			.text "@@@@@@@@"
			.text "bloaolb@w"
			.text "@@@@@@@@"
			.text "@@@@@@@@"
			.text "@@@@@@@@"
			.text "@@@@@@@@"
			.text "@@@@@@@@"
			.text "@@@@@@@@"
			.text "@@@@@@@@"
			.text "@@@@@@@@"
			.text "@@@@@@@@"
			.text "@kloaaaa"
			.text "aaaaolk@"
			.text "@@@@@@@@"
			.text "@@@@@@@@"
			.text "@@@@@@@@"
			.text "@@@@@@@@"
			.text "@@@@@@@@"
			.text "@@@@@@@@"
			.text "@@@@@@@@"
			.text "@@@@@@@@"
			.text "@@@@@@@@"
			.text "@@@@@@@@"
			.text "@@@@@@@@"
			.text "@@@@@@@@"
			.text "@@@@@@@@"
			.text "@@@@@@@@"
			.text "@kloaaa"



			

			

//-----------------------------------------------------------			
			
.pc			=	$2e00	"Text: SX-64 Real"
SX64RealText:
			//    	"1234567890123456789012345678901234567890"
			.text	"     a real sx64 has been detected      "
SX64FakeText:
			.text	"please visit ebay and buy a real sx-64  "
			
			
//-----------------------------------------------------------


			//		$DD00 = %xxxxxx11 -> bank0: $0000-$3fff
			//		$DD00 = %xxxxxx10 -> bank1: $4000-$7fff
			//		$DD00 = %xxxxxx01 -> bank2: $8000-$cfff
			//		$DD00 = %xxxxxx00 -> bank3: $c000-$ffff

.pc			=	VICbank1+$1000				"Sprites_VB1: SB & CM"
	
			:LoadSpriteFromPicture("GFX/SB_11.gif")
			:LoadSpriteFromPicture("GFX/SB_12.gif")
			:LoadSpriteFromPicture("GFX/SB_13.gif")
			:LoadSpriteFromPicture("GFX/SB_14.gif")
			:LoadSpriteFromPicture("GFX/SB_21.gif")
			:LoadSpriteFromPicture("GFX/SB_22.gif")
			:LoadSpriteFromPicture("GFX/SB_23.gif")
			:LoadSpriteFromPicture("GFX/SB_24.gif")
			:LoadSpriteFromPicture("GFX/SB_31.gif")
			:LoadSpriteFromPicture("GFX/SB_32.gif")
			:LoadSpriteFromPicture("GFX/SB_33.gif")
			:LoadSpriteFromPicture("GFX/SB_34.gif")
			:LoadSpriteFromPicture("GFX/SB_41.gif")
			:LoadSpriteFromPicture("GFX/SB_42.gif")
			:LoadSpriteFromPicture("GFX/SB_43.gif")
			:LoadSpriteFromPicture("GFX/SB_44.gif")

			:LoadSpriteFromPicture("GFX/CM_11.gif")
			:LoadSpriteFromPicture("GFX/CM_12.gif")
			:LoadSpriteFromPicture("GFX/CM_13.gif")
			:LoadSpriteFromPicture("GFX/CM_14.gif")
			:LoadSpriteFromPicture("GFX/CM_21.gif")
			:LoadSpriteFromPicture("GFX/CM_22.gif")
			:LoadSpriteFromPicture("GFX/CM_23.gif")
			:LoadSpriteFromPicture("GFX/CM_24.gif")
			:LoadSpriteFromPicture("GFX/CM_31.gif")
			:LoadSpriteFromPicture("GFX/CM_32.gif")
			:LoadSpriteFromPicture("GFX/CM_33.gif")
			:LoadSpriteFromPicture("GFX/CM_34.gif")
			:LoadSpriteFromPicture("GFX/CM_41.gif")
			:LoadSpriteFromPicture("GFX/CM_42.gif")
			:LoadSpriteFromPicture("GFX/CM_43.gif")
			:LoadSpriteFromPicture("GFX/CM_44.gif")
			
			
						
			//		$DD00 = %xxxxxx11 -> bank0: $0000-$3fff
			//		$DD00 = %xxxxxx10 -> bank1: $4000-$7fff
			//		$DD00 = %xxxxxx01 -> bank2: $8000-$cfff
			//		$DD00 = %xxxxxx00 -> bank3: $c000-$ffff			
			
.pc			=	VICbank2+$0000	"Sprites_VB2: SB & CM"
			
			:LoadSpriteFromPicture("GFX/SB_11.gif")
			:LoadSpriteFromPicture("GFX/SB_12.gif")
			:LoadSpriteFromPicture("GFX/SB_13.gif")
			:LoadSpriteFromPicture("GFX/SB_14.gif")
			:LoadSpriteFromPicture("GFX/SB_21.gif")
			:LoadSpriteFromPicture("GFX/SB_22.gif")
			:LoadSpriteFromPicture("GFX/SB_23.gif")
			:LoadSpriteFromPicture("GFX/SB_24.gif")
			:LoadSpriteFromPicture("GFX/SB_31.gif")
			:LoadSpriteFromPicture("GFX/SB_32.gif")
			:LoadSpriteFromPicture("GFX/SB_33.gif")
			:LoadSpriteFromPicture("GFX/SB_34.gif")
			:LoadSpriteFromPicture("GFX/SB_41.gif")
			:LoadSpriteFromPicture("GFX/SB_42.gif")
			:LoadSpriteFromPicture("GFX/SB_43.gif")
			:LoadSpriteFromPicture("GFX/SB_44.gif")
			
.pc			=	VICbank2+$0800	"Sprites_VB2: SB & CM"		
			:LoadSpriteFromPicture("GFX/CM_11.gif")
			:LoadSpriteFromPicture("GFX/CM_12.gif")
			:LoadSpriteFromPicture("GFX/CM_13.gif")
			:LoadSpriteFromPicture("GFX/CM_14.gif")
			:LoadSpriteFromPicture("GFX/CM_21.gif")
			:LoadSpriteFromPicture("GFX/CM_22.gif")
			:LoadSpriteFromPicture("GFX/CM_23.gif")
			:LoadSpriteFromPicture("GFX/CM_24.gif")
			:LoadSpriteFromPicture("GFX/CM_31.gif")
			:LoadSpriteFromPicture("GFX/CM_32.gif")
			:LoadSpriteFromPicture("GFX/CM_33.gif")
			:LoadSpriteFromPicture("GFX/CM_34.gif")
			:LoadSpriteFromPicture("GFX/CM_41.gif")
			:LoadSpriteFromPicture("GFX/CM_42.gif")
			:LoadSpriteFromPicture("GFX/CM_43.gif")
			:LoadSpriteFromPicture("GFX/CM_44.gif")